RPC:
	|	Client Application	|
		-> Local Application or OS
		-> LocalStub: RPC MEchanism
	
	* Server Application
	* LocalStub: RPC Mechanism
	
1. En la biblioteca, se coloca una versión de la función
2. El stub construye un mensaje los parámetros
3. El núcleo del S.O. Envía el mensaje
4. El núcleo del servidor lo transfiere los parámetros al stub del servidor
5. El stub del servidor desempaca los parámetros y los envía al servidor
6. Cuando el servidor termina el trabajo, devuelve la respuesta al stub del servidor
7. El stub empaca resultado, llama a send
8. El núcleo servidor envía mensaje al núcleo cliente.
9. El núc,eo pasa mensaje al stub
10. El styb desenoaca resultado y lo envía al cliente

Conexión dinámica:
	Conector: Guarda las interfaces (métodos, parámetros) de los servidores
	
	Cuando un servidor comienza su ejecución, envía al conector: nombre, número versión, único identificador, IP
	
Ventajas del conector:
	* Peude difundir los clientes con la carga mas justa
	* El servidor puede registrar los servidores que compoenne en el servidor
	* El usuario utiliza la misma interfaz para todos
	
Desventajas del conector:
	* El servidor podria convertirse en un cuello de botella
	* Se incrementa el número de mensajes
	
Semántica RPC en fallos:
	* El cliente no puede localizar el servidor.
	* Pérdida de la solicitud
	* Pérdida de resouesta
	
Fallo del servidor:
	Semánticas al menos una vez
	Darse por vencido y no hacer nada
	A lo mas una a lo más una
	
Fallo de los clientes: Computo huérfano
	* Exterminación: guardar un registro por medio de logs del procedimiento, el problema es cuando hay una cadena de procesos debido a que puede omitir uno solo
	* Reencarnación: Cuando el cliente se pierde debe informar su perdida y que luego este indique a los demas servidores que llevan un proceso que los elimine. El problema es que elimina es todos los proceso sy podria borrar procesos que no se deben borrar
	* Reencarnación sutil: Cuando el cliente se pierde y informa su perdida el servidor se pone a verificar en el proceso si el cliente está vivo o no para ver si lo elimina o no bajo esa condición
	* Expiración: es delimitar un tiempo de espera para el proceso, para cuando pase el tiempo indicar una respuesta de que el tiempo ha sido superado y con eso se peude hacer de que se el asigne mas tiempo
	
Reconocimientos:
	* Protocolos detenerse y esperar: Envia un mensaje y se queda esperando el momento para enviar el segundo
	* Blast protocolo: Es enviar todo a lo que da, el problema es que hay mucha probabilidad que no alcanza a recibir alguno por el tiempo

Ruta crítica: Serie de pasos donde tienen qeu cumplirse si o si
	Cliente	|Llamada al stub
			
			|Prepara el bufer mensaje ordena los parametros		|Llama al servidor									|
	Stub	|Llena los campos del encabezado, señala el nucelo	|Establece los parámetros en la pila ordena			|
	Cliente	|Señala al nucleo									|parámetros											|
			|													|													|
	
			|Cambio de contexto, Copia mensaje Determina la		|Cambia de contexto, copia mensaje, Copia mensaje	|
	núcleo	|dirección pone la dirección del mensaje. Estableció|al stub ve si el stub está esperando. Decide a cuál|
			|interfaz de red inicializa cronómetro, interrupción|entregarlo, verificar validez paquete
			|del proceso										|
	
	
	
	